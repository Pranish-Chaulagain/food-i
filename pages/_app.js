import { useState } from "react";
import { Router, useRouter } from "next/router";
import { Provider } from "react-redux";
import Head from "next/head";
import Footer from "@/components/Footer";
import Header from "@/components/Header";
import Loader from "@/components/Loader";
import store from "@/store/store";
import "@/styles/globals.css";
import NewsLetter from "@/components/NewsLetter";
import { AuthUserProvider } from "@/firebase/auth";
import Top from "@/components/Top";

export default function App({ Component, pageProps }) {
  const [loading, setLoading] = useState(false);

  Router.events.on("routeChangeStart", () => setLoading(true));
  Router.events.on("routeChangeComplete", () => setLoading(false));
  Router.events.on("routeChangeError", () => setLoading(false));

  const router = useRouter();
  const { asPath } = router;
  const noNav = ["/login", "/register"];

  const noNewsLetter = ["/cart", "/failed", "/success"];

  return (
    <>
      <Head>
        <title>Food-I | Food Ordering System</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.svg" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link
          rel="preconnect"
          href="https://fonts.gstatic.com"
          crossOrigin="true"
        />
        <link
          href="https://fonts.googleapis.com/css2?family=Urbanist:wght@100;200;300;400;500;600;700;800;900&display=swap"
          rel="stylesheet"
        />
      </Head>
      <AuthUserProvider>
        {loading ? (
          <Loader />
        ) : (
          <Provider store={store}>
            {noNav.includes(asPath) ? null : <Top />}
            {noNav.includes(asPath) ? null : <Header />}
            <Component {...pageProps} />
            {noNav && noNewsLetter.includes(asPath) ? null : <NewsLetter />}
            {noNav.includes(asPath) ? null : <Footer />}
          </Provider>
        )}
      </AuthUserProvider>
    </>
  );
}
